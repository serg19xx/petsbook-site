import api from './index'

export const petsApi = {
  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async fetchMyPets() {
    const response = await api.get('/api/pets/my-pets', { withCredentials: true })
    return response.data
  },

  // –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–∏—Ç–æ–º—Ü–∞ –ø–æ ID
  async fetchPetDetails(petId) {
    const response = await api.get(`/api/pets/${petId}`, { withCredentials: true })
    return response.data
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
  async createPet(petData) {
    const response = await api.post('/api/pets', petData, { withCredentials: true })
    return response.data
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞
  async updatePet(petId, petData) {
    const response = await api.put(`/api/pets/${petId}`, petData, { withCredentials: true })
    return response.data
  },

  // –£–¥–∞–ª–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞
  async deletePet(petId) {
    const response = await api.delete(`/api/pets/${petId}`, { withCredentials: true })
    return response.data
  },

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞ (petId = 0 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ)
  async uploadPetPhoto(petId, file, filename = null) {
    console.log('üöÄ uploadPetPhoto called with:', {
      petId,
      filename,
      fileInfo: {
        name: file?.name,
        size: file?.size,
        type: file?.type,
      },
      fileExists: !!file,
      fileType: typeof file,
    })

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê
    if (!file) {
      console.error('‚ùå No file provided to uploadPetPhoto!')
      throw new Error('File is required for photo upload')
    }

    // üî• –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–ê –§–ê–ô–õ–ê (–º–∞–∫—Å 10MB)
    const maxSize = 10 * 1024 * 1024 // 10MB
    if (file.size > maxSize) {
      throw new Error(`File too large: ${(file.size / 1024 / 1024).toFixed(2)}MB (max: 10MB)`)
    }

    // üî• –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–ê –§–ê–ô–õ–ê
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp']
    if (!allowedTypes.includes(file.type)) {
      throw new Error(`Invalid file type: ${file.type}`)
    }

    const formData = new FormData()
    formData.append('photo', file)
    formData.append('pet_id', petId)

    if (filename) {
      formData.append('filename', filename)
      console.log('üîÑ REPLACING existing file:', filename)
    } else {
      console.log('‚ûï ADDING new file')
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
    console.log('üìä Request details:', {
      petId: petId,
      filename: filename || 'null',
      fileSize: file.size,
      fileType: file.type,
      fileName: file.name,
      operation: filename ? 'REPLACE' : 'ADD',
    })

    // –û—Ç–ª–∞–¥–∫–∞ FormData
    console.log('üì¶ FormData contents:')
    for (let [key, value] of formData.entries()) {
      console.log(
        `  ${key}:`,
        typeof value === 'object'
          ? `File(${value.name}, ${value.size} bytes, ${value.type})`
          : value,
      )
    }

    // –û—Ç–ª–∞–¥–∫–∞ –∫—É–∫
    console.log('üìÑ Current cookies:', document.cookie)
    console.log('üîó API base URL:', import.meta.env.VITE_API_BASE_URL)

    // –í–ê–ñ–ù–û: –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –≤—Ä—É—á–Ω—É—é –¥–ª—è FormData
    // –ë—Ä–∞—É–∑–µ—Ä —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Content-Type —Å boundary
    const response = await api.post('/api/pets/photo/upload', formData, {
      withCredentials: true, // –í–∞–∂–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ cookies
    })

    console.log('‚úÖ Photo upload response:', response.data)
    return response.data
  },

  // –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞
  async deletePetPhoto(petId, filename, userId = null) {
    console.log('üóëÔ∏è deletePetPhoto called with:', {
      petId,
      filename,
      userId,
    })

    const requestData = {
      pet_id: petId,
      filename: filename,
    }

    // –î–æ–±–∞–≤–ª—è–µ–º user_id –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    if (userId) {
      requestData.user_id = userId
    }

    const response = await api.post('/api/pets/photo/delete', requestData, {
      withCredentials: true,
    })
    return response.data
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–∏—Ç–æ–º—Ü–µ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫)
  async fetchAllPets(params = {}) {
    const response = await api.get('/api/pets', { params, withCredentials: true })
    return response.data
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—É—é –≥–∞–ª–µ—Ä–µ—é –ø–∏—Ç–æ–º—Ü–µ–≤
  async fetchPublicPets(params = {}) {
    const queryParams = new URLSearchParams()

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if (params.page) queryParams.append('page', params.page)
    if (params.limit) queryParams.append('limit', params.limit)

    // –§–∏–ª—å—Ç—Ä—ã
    if (params.species) queryParams.append('species', params.species)
    if (params.gender) queryParams.append('gender', params.gender)
    if (params.age) queryParams.append('age', params.age)
    if (params.location) queryParams.append('location', params.location)
    if (params.radius) queryParams.append('radius', params.radius)

    // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (params.user_lat) queryParams.append('user_lat', params.user_lat)
    if (params.user_lng) queryParams.append('user_lng', params.user_lng)

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if (params.sort) queryParams.append('sort', params.sort)

    const url = `/api/pets/public${queryParams.toString() ? '?' + queryParams.toString() : ''}`
    console.log('üîç Fetching public pets:', url)

    const response = await api.get(url)
    return response.data
  },

  // –ü–æ–∏—Å–∫ –ø–∏—Ç–æ–º—Ü–µ–≤
  async searchPets(searchParams) {
    const response = await api.get('/api/pets/search', {
      params: searchParams,
      withCredentials: true,
    })
    return response.data
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∏—Ç–æ–º—Ü–∞ (–ø—É–±–ª–∏–∫–∞—Ü–∏—è)
  async updatePetStatus(petId, status) {
    console.log('üîÑ updatePetStatus called with:', {
      petId,
      status,
    })

    const response = await api.patch(
      `/api/pets/${petId}/status`,
      { published: status },
      { withCredentials: true },
    )
    console.log('‚úÖ updatePetStatus response:', response.data)
    return response.data
  },

  // –ü–æ—Å—Ç–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –ª–∞–π–∫ –ø–∏—Ç–æ–º—Ü—É
  async togglePetLike(petId) {
    console.log('‚ù§Ô∏è Toggling like for pet:', petId)

    const response = await api.post(
      `/api/pets/${petId}/like`,
      {},
      {
        withCredentials: true,
      },
    )

    console.log('‚úÖ Like response:', response.data)
    return response.data
  },
}
