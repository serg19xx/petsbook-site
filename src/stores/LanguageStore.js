import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import i18n from '@/i18n'
import api from '@/api'

/* global window, localStorage, console, EventSource, setTimeout */

export const useLanguageStore = defineStore('language', () => {
  const translations = ref({})
  const currentLanguage = ref(window.localStorage.getItem('language') || 'en')
  const isLoaded = ref(false)
  const locales = ref(['en', 'ru'])

  // Translation state
  const translationProgress = ref(0)
  const translationStatus = ref('idle') // idle, processing, completed, failed
  const translationMessage = ref('')

  let currentEventSource = null // For storing current connection

  const currentTranslations = computed(() => translations.value[currentLanguage.value] || {})

  function flatToNested(flatObj) {
    console.log('flatToNested called with:', flatObj)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!flatObj || typeof flatObj !== 'object') {
      console.error('Invalid input to flatToNested:', flatObj)
      return null
    }

    try {
      const nested = {}
      console.log('Created nested object')

      // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏
      const keys = Object.keys(flatObj)
      console.log('Total keys to process:', keys.length)

      if (keys.length === 0) {
        console.log('No keys to process, returning empty object')
        return nested
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á
      for (let i = 0; i < keys.length; i++) {
        const flatKey = keys[i]

        // –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–ª—é—á–∏ –≤–∏–¥–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö
        if (flatKey.includes('petspecies.options')) {
          console.log('üîç Found petspecies key:', flatKey, '->', flatObj[flatKey])
        }

        console.log(`Processing key ${i + 1}/${keys.length}:`, flatKey)

        try {
          const value = flatObj[flatKey]
          const keyParts = flatKey.split('.')
          let current = nested

          // –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
          for (let j = 0; j < keyParts.length - 1; j++) {
            const part = keyParts[j]
            // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∫–ª—é—á
            if (typeof current[part] === 'string') {
              console.warn(`Conflict: "${part}" is already a string, skipping key "${flatKey}"`)
              continue
            }
            if (!current[part]) {
              current[part] = {}
            }
            current = current[part]
          }

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
          const lastPart = keyParts[keyParts.length - 1]
          current[lastPart] = value
          console.log(`Successfully processed: ${flatKey} -> ${value}`)
        } catch (keyError) {
          console.error(`Error processing key "${flatKey}":`, keyError)
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∫–ª—é—á–µ–π
        }
      }

      console.log('All keys processed successfully')
      console.log('Final nested object keys:', Object.keys(nested))
      return nested
    } catch (error) {
      console.error('Critical error in flatToNested:', error)
      console.error('Error stack:', error.stack)
      return null
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  function setTranslationProgress(progress) {
    translationProgress.value = progress
  }

  function setTranslationStatus(status) {
    translationStatus.value = status
  }

  function setTranslationMessage(message) {
    translationMessage.value = message
  }

  function resetTranslationState() {
    translationProgress.value = 0
    translationStatus.value = 'idle'
    translationMessage.value = ''
  }

  async function setLanguage(lang) {
    console.log('setLanguage called with:', lang)
    try {
      console.log('–ü–µ—Ä–µ–¥ await api.get')
      const response = await api.get(`/api/i18n/translations/${lang}`)
      console.log('–ü–æ—Å–ª–µ await, API response:', response)
      const responseData = response.data
      console.log('API responseData:', responseData)
      if (responseData.status !== 200) {
        console.error('API returned error:', responseData.message)
        return null
      }
      const { data } = responseData
      let newTranslations = {}
      console.log(
        'data.translations:',
        data.translations,
        typeof data.translations,
        Array.isArray(data.translations),
      )
      if (data.translations) {
        console.log('data:', data)
        console.log('Translations before flatToNested:', data.translations)
        const nested = flatToNested(data.translations)
        console.log('flatToNested output:', nested)
        console.log('nested type:', typeof nested)
        console.log('nested keys:', nested ? Object.keys(nested) : 'nested is null/undefined')
        newTranslations = nested
        console.log('Translations after flatToNested:', newTranslations)

        if (nested) {
          console.log('Setting locale message for:', lang)
          i18n.global.setLocaleMessage(lang, nested)
          console.log('en messages:', i18n.global.getLocaleMessage('en'))
          console.log('Current locale before setting:', i18n.global.locale.value)

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å
          i18n.global.locale.value = lang
          console.log('Current locale after setting:', i18n.global.locale.value)
        } else {
          console.error('nested is null/undefined, cannot set locale message')
        }
      } else {
        console.warn('data.translations –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π!', data)
      }
      translations.value = newTranslations
      currentLanguage.value = lang
      isLoaded.value = true
      localStorage.setItem('language', lang)
      return newTranslations
    } catch (error) {
      console.error('Error in setLanguage:', error)
    }
  }

  async function initializeLanguage() {
    console.log('Calling initializeLanguage...')
    const savedLanguage = localStorage.getItem('language') || 'en'
    return await setLanguage(savedLanguage)
  }

  async function addLanguage(langCode) {
    try {
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞:', `/api/i18n/translate-language/${langCode}`)
      const response = await api.post(`/api/i18n/translate-language/${langCode}`)
      console.log('–ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç:', response.data)
      return true
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.response || error)
      throw error
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–º–µ–Ω—ã
  function cancelTranslation() {
    if (currentEventSource) {
      currentEventSource.close()
      currentEventSource = null
      setTranslationStatus('idle')
      setTranslationMessage('')
      setTranslationProgress(0)
    }
  }

  function changeLanguage(lang) {
    setLanguage(lang)
  }

  async function fetchLocales() {
    try {
      const response = await api.get('/api/i18n/locales')
      locales.value = response.data.locales // –Ω–∞–ø—Ä–∏–º–µ—Ä: [{ code: 'en', label: 'English' }, ...]
    } catch (error) {
      console.error('Failed to fetch locales:', error)
    }
  }

  return {
    currentLanguage,
    translations,
    isLoaded,
    locales,
    translationProgress,
    translationStatus,
    translationMessage,
    setLanguage,
    initializeLanguage,
    addLanguage,
    changeLanguage,
    currentTranslations,
    fetchLocales,
    setTranslationProgress,
    setTranslationStatus,
    setTranslationMessage,
    resetTranslationState,
    cancelTranslation,
  }
})
