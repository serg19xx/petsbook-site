import { ref } from 'vue'
import { defineStore } from 'pinia'
import { petsApi } from '@/api/pets'

export const usePetsStore = defineStore('pets', () => {
  const pets = ref([])
  const loading = ref(false)
  const error = ref(null)
  const totalPets = ref(0)
  const currentPage = ref(1)
  const searchQuery = ref('')

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async function fetchMyPets() {
    console.log('üîÑ fetchMyPets called - this might cause flickering')
    loading.value = true
    error.value = null
    try {
      const response = await petsApi.fetchMyPets()
      pets.value = response?.data?.pets || []
      totalPets.value = response?.data?.total_count || pets.value.length
      console.log('‚úÖ fetchMyPets completed, loaded', pets.value.length, 'pets')
    } catch (err) {
      error.value = err?.response?.data?.message || err.message || 'Failed to load pets'
      console.error('Error fetching my pets:', err)
    } finally {
      loading.value = false
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–∏—Ç–æ–º—Ü–µ–≤ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)
  async function fetchAllPets(params = {}) {
    loading.value = true
    error.value = null
    try {
      const response = await petsApi.fetchAllPets(params)
      pets.value = response?.data || []
      totalPets.value = response?.total || 0
      currentPage.value = params.page || 1
      searchQuery.value = params.search || ''
    } catch (err) {
      error.value = err?.response?.data?.message || err.message || 'Failed to load pets'
      console.error('Error fetching all pets:', err)
    } finally {
      loading.value = false
    }
  }

  // –ü–æ–∏—Å–∫ –ø–∏—Ç–æ–º—Ü–µ–≤
  async function searchPets(searchParams) {
    loading.value = true
    error.value = null
    try {
      const response = await petsApi.searchPets(searchParams)
      pets.value = response?.data || []
      totalPets.value = response?.total || 0
      searchQuery.value = searchParams.search || ''
    } catch (err) {
      error.value = err?.response?.data?.message || err.message || 'Failed to search pets'
      console.error('Error searching pets:', err)
    } finally {
      loading.value = false
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
  async function addPet(petData) {
    loading.value = true
    error.value = null
    try {
      const response = await petsApi.createPet(petData)
      const newPet = response?.data
      if (newPet) {
        pets.value.unshift(newPet) // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        totalPets.value++
      }
      return newPet
    } catch (err) {
      error.value = err?.response?.data?.message || err.message || 'Failed to add pet'
      console.error('Error adding pet:', err)
      throw err
    } finally {
      loading.value = false
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞
  async function updatePet(petId, petData) {
    loading.value = true
    error.value = null
    try {
      const response = await petsApi.updatePet(petId, petData)
      const updatedPet = response?.data
      if (updatedPet) {
        const idx = pets.value.findIndex((p) => p.id === petId)
        if (idx !== -1) {
          pets.value[idx] = updatedPet
        }
      }
      return updatedPet
    } catch (err) {
      error.value = err?.response?.data?.message || err.message || 'Failed to update pet'
      console.error('Error updating pet:', err)
      throw err
    } finally {
      loading.value = false
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞
  async function deletePet(petId) {
    loading.value = true
    error.value = null
    try {
      await petsApi.deletePet(petId)
      pets.value = pets.value.filter((p) => p.id !== petId)
      totalPets.value = Math.max(0, totalPets.value - 1)
    } catch (err) {
      error.value = err?.response?.data?.message || err.message || 'Failed to delete pet'
      console.error('Error deleting pet:', err)
      throw err
    } finally {
      loading.value = false
    }
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞
  async function uploadPetPhoto(petId, file, filename = null) {
    loading.value = true
    error.value = null
    try {
      const response = await petsApi.uploadPetPhoto(petId, file, filename)

      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π pet_id (—Å–æ–∑–¥–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü)
      if (response?.petId && petId === 0) {
        return { petId: response.petId, ...response }
      }

      return response
    } catch (err) {
      error.value = err?.response?.data?.message || err.message || 'Failed to upload photo'
      console.error('Error uploading pet photo:', err)
      throw err
    } finally {
      loading.value = false
    }
  }

  // –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞
  async function deletePetPhoto(petId, filename, userId = null) {
    loading.value = true
    error.value = null
    try {
      const response = await petsApi.deletePetPhoto(petId, filename, userId)

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–∞ –≤ store
      const pet = getPetById(petId)
      if (pet && pet.main_photos) {
        pet.main_photos = pet.main_photos.filter((photo) => photo.filename !== filename)
      }

      return response
    } catch (err) {
      error.value = err?.response?.data?.message || err.message || 'Failed to delete photo'
      console.error('Error deleting pet photo:', err)
      throw err
    } finally {
      loading.value = false
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –ø–æ ID
  function getPetById(petId) {
    return pets.value.find((p) => p.id === petId)
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∏—Ç–æ–º—Ü–∞
  async function updatePetStatus(petId, status) {
    // –£–ë–ò–†–ê–ï–ú loading –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ - –æ–Ω–∞ –±—ã—Å—Ç—Ä–∞—è –∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ä—Ü–∞–Ω–∏–µ
    // loading.value = true
    error.value = null
    try {
      console.log('üîÑ updatePetStatus called with petId:', petId, 'status:', status)

      const response = await petsApi.updatePetStatus(petId, status)
      console.log('üîÑ updatePetStatus response:', response)

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ store –ë–ï–ó –ú–ï–†–¶–ê–ù–ò–Ø
      const idx = pets.value.findIndex((p) => p.id === petId)
      console.log(' Found pet at index:', idx)

      if (idx !== -1) {
        const petInStore = pets.value[idx]

        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        if (response?.data) {
          const updatedPetData = response.data.pet || response.data

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å, –Ω–µ –∑–∞–º–µ–Ω—è—è –≤–µ—Å—å –æ–±—ä–µ–∫—Ç
          if (updatedPetData.published !== undefined) {
            petInStore.published = updatedPetData.published
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
          if (updatedPetData.name !== undefined) petInStore.name = updatedPetData.name
          if (updatedPetData.species !== undefined) petInStore.species = updatedPetData.species
          if (updatedPetData.breed !== undefined) petInStore.breed = updatedPetData.breed
          if (updatedPetData.gender !== undefined) petInStore.gender = updatedPetData.gender
          if (updatedPetData.dob !== undefined) petInStore.dob = updatedPetData.dob
          if (updatedPetData.color !== undefined) petInStore.color = updatedPetData.color
          if (updatedPetData.description !== undefined)
            petInStore.description = updatedPetData.description
          if (updatedPetData.pet_size !== undefined) petInStore.pet_size = updatedPetData.pet_size

          console.log('‚úÖ Updated pet properties in store:', updatedPetData)
        } else {
          // –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω–æ
          petInStore.published = status
          console.log('‚úÖ Updated pet status locally:', status)
        }
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü –∏–∑ store
      const result = pets.value[idx]
      console.log('üîÑ Returning updated pet from store:', result)
      return result
    } catch (err) {
      error.value = err?.response?.data?.message || err.message || 'Failed to update pet status'
      console.error('Error updating pet status:', err)
      throw err
    }
    // –£–ë–ò–†–ê–ï–ú finally –±–ª–æ–∫ - –Ω–µ –Ω—É–∂–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å loading
    // } finally {
    //   loading.value = false
    // }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏
  function clearError() {
    error.value = null
  }

  // –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  function reset() {
    pets.value = []
    loading.value = false
    error.value = null
    totalPets.value = 0
    currentPage.value = 1
    searchQuery.value = ''
  }

  return {
    // State
    pets,
    loading,
    error,
    totalPets,
    currentPage,
    searchQuery,

    // Actions
    fetchMyPets,
    fetchAllPets,
    searchPets,
    addPet,
    updatePet,
    updatePetStatus, // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    deletePet,
    uploadPetPhoto,
    deletePetPhoto, // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    getPetById,
    clearError,
    reset,
  }
})
